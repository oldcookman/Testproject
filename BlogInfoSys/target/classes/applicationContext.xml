<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd">
	
	<!-- 此处用于加载database.properties，使得dataSource的配置中的占位符能够有值 -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:database.properties"/>
	</bean>
	
	<!-- 配置数据源,以dbcp数据源作为连接池 -->
	<!-- data : 数据   	source ：源头，来源，源，资源		dataSource : 数据源 -->
	<!-- 整合别人的优秀资源，直接拿过来用，不重复造轮子 -->
	<!-- dbcp / c3p0 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="driverClassName" value="${jdbc.driver}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.pwd}"/>
	</bean>
	
	<!-- 配置会话工厂，将会话工厂交给Spring托管 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 指定myBatis核心配置文件的位置，才能够加载到它 -->
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
		<!-- 指定引用的数据源，使得数据库得以连接成功 -->
		<property name="dataSource" ref="dataSource"/>
		<!-- 加载Mapper映射文件 -->
		<property name="mapperLocations">
			<list>
				<value>classpath:com/bdqn/mapper/*.xml</value>
			</list>
		</property>
	</bean>
	
	<!-- 配置Mapper扫描器 - 配置Mapper对应的实现类代理对象 -->
	<!-- MapperScannerConfigurer 自动扫描将Mapper接口生成代理注入到spring -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!--basePackage指定要扫描的包，在此包之下的映射器都会被搜索到。可指定多个包，包与包之间用逗号或分号分隔-->
		<property name="basePackage" value="com.bdqn.dao"/>
	</bean>
	
	<!-- ******************* 声明式事务处理配置 start ***************** -->
	
	<!-- 配置事务管理器 -->
	<!-- 事务管理配制: MyBatis自动参与到spring事务管理中，无需额外配置，
	只要org.mybatis.spring.SqlSessionFactoryBean引用的数据源
	与DataSourceTransactionManager引用的数据源一致即可，否则事务管理会不起作用。-->	
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
    </bean>
	
	<!-- 配置AOP -->
    <aop:aspectj-autoproxy/>
    
    <!-- 使用声明式配置事物(事务通知) -->
    <!--Spring中常用事务类型：
         REQUIRED       支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。
         SUPPORTS       支持当前事务，如果当前没有事务，就以非事务方式执行。
         MANDATORY      支持当前事务，如果当前没有事务，就抛出异常。
         REQUIRES_NEW   新建事务，如果当前存在事务，把当前事务挂起。
         NOT_SUPPORTED  以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。
         NEVER          以非事务方式执行，如果当前存在事务，则抛出异常。    
     -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
	    <tx:attributes>
	    	<tx:method name="add*" propagation="REQUIRED"/>
	        <tx:method name="update*" propagation="REQUIRED"/>
	        <tx:method name="delete*" propagation="REQUIRED"/>
	        <tx:method name="*" propagation="SUPPORTS" read-only="true"/>
	    </tx:attributes>
    </tx:advice>
	
	<!-- 将通知应用到指定的切入点 -->
    <aop:config proxy-target-class="true">
      	<aop:pointcut id="txPointCut" expression="execution(* com.bdqn.biz..*.*(..))"/>
      	<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut"/>
    </aop:config>
	
	<!-- ******************* 声明式事务处理配置 end ***************** -->
	
	<!-- 组件扫描 -->
	<context:component-scan base-package="com.bdqn"/>
</beans>